{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"api/","text":"Bryllite.NET JSON-RPC \u00b6 JSON is a lightweight data-interchange format. It can represent numbers, strings, ordered sequences of values, and collections of name/value pairs. JSON-RPC is a stateless, light-weight remote procedure call (RPC) protocol. Primarily this specification defines several data structures and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets, over HTTP, or in many various message passing environments. It uses JSON (RFC 4627) as data format. JSON-RPC Endpoint \u00b6 Default JSON-RPC endpoints: Service URL Web4b http://localhost:8451 Hex value encoding \u00b6 At present there are two key datatypes that are passed over JSON: unformatted byte arrays and quantities. Both are passed with a hex encoding, however with different requirements to formatting: When encoding QUANTITIES (integers, numbers): encode as hex, prefix with \"0x\", the most compact representation (slight exception: zero should be represented as \"0x00\"). Examples: 0x41 ( 65 in decimal) 0x0400 ( 1024 in decimal) WRONG: 0x (should always have at least two digit - zero is 0x00 ) WRONG: 0x400 (hex string shoud be even digit - valid is 0x0400 ) WRONG: ff (must be prefixed 0x ) The Default block parameter \u00b6 The following methods have an extra default block parameter: be4_getBalance be4_getTransactionCount be4_getBlockTransactionCountByNumber be4_getBlockByNumber be4_getTransactionByBlockNumberAndIndex When requests are made that act on the state of bryllite, the last default block parameter determines the height of the block. The following options are possible for the defaultBlock parameter: HEX string - an integer block number String \"earliest\" - for the earliest/genesis block String \"latest\" - for the latest mined block String \"pending\" - for the pending state/transactions Curl Examples Explained \u00b6 The curl options below might return a response where the node complains about the content type, this is because the --data option sets the content type to application/x-www-form-urlencoded . If your node does complain, manually set the header by placing -H \"Content-Type: application/json\" at the start of the call. The examples also do not include the URL/IP & port combination which must be the last argument given to curl e.x. 127.0.0.1:9627 JSON-RPC Methods \u00b6 WEB4B API \u00b6 web4b_getVersion web4b_getTime web4b_sha3 web4b_mining web4b_getWork web4b_submitWork NET API \u00b6 net_listening net_getAuthoprizedPeersRootHash net_getAuthorizedPeersCount net_getAuthorizedPeers ADMIN API \u00b6 admin_addPeer admin_removePeer admin_startMiner admin_stopMiner BE4 API \u00b6 be4_coinbase be4_blockNumber be4_getBalance be4_getTransactionCount be4_getBlockTransactionCountByHash be4_getBlockTransactionCountByNumber be4_sendRawTransaction be4_getBlockByHash be4_getBlockByNumber be4_getTransactionByHash be4_getTransactionByBlockHashAndIndex be4_getTransactionByBlockNumberAndIndex be4_getTransactionReceipt be4_pendingTransactions be4_getTransactionsByAddress JSON RPC API References \u00b6 web4b_getVersion \u00b6 Returns the current node version. Parameters None Returns String - The current version Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"web4b_getVersion\", \"params\": [], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ \"0.8.2-alpha\" ] } web4b_getTime \u00b6 Returns the current node time. See Unix Epoch Time Parameters None Returns QUANTITY - Hex string of unix epoch time in milliseconds. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"web4b_getTime\", \"params\": [], \"id\": 32}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0x016f6fe9fdc8\" // 1,578,130,603,464 (2020\ub144 January 4\uc77c Saturday AM 9:36:43.464) ] } web4b_sha3 \u00b6 Returns Keccak-256 ( not the standardized SHA3-256 ) of the given data. Parameters 1. DATA - Hex string of the data to convert into a SHA3 hash. Example Parameters JavaScript \"params\" : [ \"0x68656c6c6f20776f726c64\" ] Returns DATA - Hex string of the SHA3 result of the given data. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"web4b_sha3\", \"params\": [\"0x68656c6c6f20776f726c64\"], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\" ] } web4b_mining \u00b6 Returns true if node is actively mining new blocks. Parameters None Retruns Boolean - returns true of the node is mining, otherwise false . Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"web4b_mining\", \"params\": [], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ true ] } web4b_getWork \u00b6 Returns the hash of the current block, the seedHash, and the boundary condition to be met (\"target\"). Parameters None Retruns Array - Array with the following properties: DATA , 32 Bytes - current block header pow-hash DATA , 32 Bytes - the seed hash used for the DAG. DATA , 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"web4b_getWork\", \"params\": [], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\" , \"0x5EED00000000000000000000000000005EED0000000000000000000000000000\" , \"0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000\" ] } web4b_submitWork \u00b6 Used for submitting a proof-of-activity solution. Parameters 1. DATA , 8 Bytes - The nonce found (64 bits) 1. DATA , 32 Bytes - The header's poa-hash (256 bits) 1. DATA , 32 Bytes - The mix digest (256 bits) Retruns Boolean - returns true if the provided solution is valid, otherwise false. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"web4b_getWork\", \"params\": [ \"0x0000000000000001\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\", \"0xD1GE5700000000000000000000000000D1GE5700000000000000000000000000\" ], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ true ] } net_listening \u00b6 Returns true if node is listening on BCP port. Parameters None Retruns Boolean - returns true of the node is listening on BCP port, otherwise false . Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"net_listening\", \"params\": [], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ true ] } net_getAuthorizedPeersRootHash \u00b6 Returns authorized peers root hash. Parameters None Retruns DATA - Hex string of authorized peers root hash Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"net_getAuthorizedPeersRootHash\", \"params\": [], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0xe235933bcacd7f464c4c4a9a7875dbaefc6d36a233eef318048c8ecb6adecb99\" ] } net_getAuthorizedPeersCount \u00b6 Returns authorized peers count. Parameters None. Retruns DATA - Hex string of authorized peers count. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"net_getAuthorizedPeersCount\", \"params\": [], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ \"0x03\" ] } net_getAuthorizedPeers \u00b6 Returns authorized peers. Parameters 1. DATA - Hex string of authorized peers root hash. Retruns Array - Array of authorized peers enode. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"net_getAuthorizedPeers\", \"params\": [\"0xe235933bcacd7f464c4c4a9a7875dbaefc6d36a233eef318048c8ecb6adecb99\"], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ \"enode://0x02cae79e5203828cd869aebcf79b6257c687accf06540012a19ddc9549b385ce9e@eu-central.static.bryllite.com:8451/?rpcport=9627&q=static\" , \"enode://0x034932efd3d424042945ad10c228d4eb903f9a266049aec69f91598c54e8f047a8@asia-east.static.bryllite.com:8451/?rpcport=9627&q=static\" , \"enode://0x0363cfe2d20f2e9faadf0c23beb5b0b1f410f8e8a35293e0d72e6f437a086e7d45@us-east.static.bryllite.com:8451/?rpcport=9627&q=static\" ] } admin_addPeer \u00b6 Append peer's enode in authorized peers. Parameters 1. String - enode of peer to append. 1. DATA - Hex string of timestamp in milliseconds. 1. DATA - Hex string of signature signed by node key. Example Parameters JavaScript params : [ 'enode://0x0363cfe2d20f2e9faadf0c23beb5b0b1f410f8e8a35293e0d72e6f437a086e7d45@us-east.static.bryllite.net:8452/' , '0x0181e78d9788' , '0xdad7b6baf280ef8bf98e9a33fc19230820cd0ea4459210ddb8e821eed1df9d62' ] Retruns 1. Boolean - Result of request. 1. String - Hex string of authorized peers root hash or error message if request failed. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"admin_addPeer\", \"params\":[{see above}], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ true , \"0xe235933bcacd7f464c4c4a9a7875dbaefc6d36a233eef318048c8ecb6adecb99\" ] } admin_removePeer \u00b6 Remove peer's enode in authorized peers. Parameters 1. String - enode of peer to remove. 1. DATA - Hex string of timestamp in milliseconds. 1. DATA - Hex string of signature signed by node key. Example Parameters JavaScript params : [ 'enode://0x0363cfe2d20f2e9faadf0c23beb5b0b1f410f8e8a35293e0d72e6f437a086e7d45@us-east.static.bryllite.net:8452/' , '0x0181e78d9788' , '0xdad7b6baf280ef8bf98e9a33fc19230820cd0ea4459210ddb8e821eed1df9d62' ] Retruns 1. Boolean - Result of request. 1. String - Hex string of authorized peers root hash or error message if request failed. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"admin_removePeer\", \"params\":[{see above}], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ true , \"0xe235933bcacd7f464c4c4a9a7875dbaefc6d36a233eef318048c8ecb6adecb99\" ] } be4_coinbase \u00b6 Returns the node coinbase address. Parameters none Returns DATA - the current coinbase address. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_coinbase\", \"params\": [], \"id\": 64}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 64 , \"result\" : [ \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" ] } be4_blockNumber \u00b6 Returns the number of most recent block. Parameters none Returns QUANTITY - integer of the current block number the node is on. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_blockNumber\", \"params\": [], \"id\": 1}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : [ \"0x64\" // 100 ] } be4_getBalance \u00b6 Returns the balance of the account of given address. Parameters 1. DATA - address to check for balance. 1. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters JavaScript params : [ \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"latest\" ] Returns QUANTITY - integer of the current balance in beryl. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getBalance\", \"params\": [\"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\", \"latest\"], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0xe662cbc700\" // 989500000000 (98.95 BRC) ] } be4_getTransactionCount \u00b6 Returns the number of transactions sent from an address. a.k.a nonce Parameters 1. DATA - address to check for balance. 1. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters JavaScript params : [ \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"pending\" ] Returns QUANTITY - integer of the number of transactions send from given address. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getTransactionCount\", \"params\": [\"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\", \"pending\"], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0x05\" // 5 ] } be4_getBlockTransactionCountByHash \u00b6 Returns the number of transactions in a block matching the given block hash. Parameters DATA - hash of a block. Example Parameters JavaScript params : [ \"0x89c11a7d8e927431d453f46c0ad1cfbbd50e39aac450d907d1b8768667d01a0c\" ] Returns QUANTITY - integer of the number of transactions in this block. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getBlockTransactionCountByHash\", \"params\": [\"0x89c11a7d8e927431d453f46c0ad1cfbbd50e39aac450d907d1b8768667d01a0c\"], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0x01\" ] } be4_getBlockTransactionCountByNumber \u00b6 Returns the number of transactions in a block matching the given block number. Parameters QUANTITY|TAG - integer of a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter Example Parameters JavaScript params : [ \"0x63\" // 99 ] Returns QUANTITY - integer of the number of transactions in this block. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getBlockTransactionCountByNumber\", \"params\": [\"0x63\"], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0x01\" ] } be4_sendRawTransaction \u00b6 Creates new message call transaction or a contract creation for signed transaction. Parameters DATA - The signed transaction data. See web4b.cs for transaction data inside. Example Parameters JavaScript params : [ \"0xf8818400000000840000000080845daae45094e9f5e6d433316e4abfeff8c40ac405b735129501880000000005f5e10084000000008800000000000000008080b841732f528f57e1b0aea54d9bd6a9b250770a2389eeaa202675d9f5845c005bf65d80d37c68d7f04bfd8d9aea8d45b5ee3b504c433dcfc7dd75fe0b11d56867fa3301\" ] Returns DATA - the transaction hash, or json-rpc error object if tx not executable. Use be4_getTransactionReceipt to get result of transaction. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_sendRawTransaction\", \"params\": [{see above}], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0x3fc20bc4542b0697990b0558fcda7a1d2aa10e5cacd6154b6dcf7377abd0ba64\" ] } be4_getBlockByHash \u00b6 Returns information about a block by hash. Parameters 1. DATA - Hash of a block. 1. NUMBER - If 0x00(default) it returns the transaction object(json) with tx hashes, if 0x01 it returns the transaction object(json) with tx object, if 0x02 it returns the raw block data ( block rlp ). Example Parameters JavaScript params : [ \"0x89c11a7d8e927431d453f46c0ad1cfbbd50e39aac450d907d1b8768667d01a0c\" , \"0x00\" ] Returns Object - A block object or block rlp hex string, or null when no block was found: * hash : DATA - hash of the block. * number : QUANTITY - the block number. * chainId : DATA - network id. * version : DATA - version. * timestamp : QUANTITY - the unix timestamp for when the block was collated. * coinbase : DATA - the address of the beneficiary to whom the mining rewards were given. * witness : DATA - the address of witness providing share by proof-of-attendance. * parentHash : DATA - hash of the parent block. * transactionRoot : DATA - the root of the transaction trie of the block. * stateRoot : DATA - the root of the final state trie of the block. * nonce : DATA - nonce. * data : DATA - data. * extra : DATA - the \"extra data\" field of this block. * transactions : Array - Array of transaction objects, or array of txid depending on the given parameter. * size : QUANTITY - integer the size of this block in bytes. * gasUsed : QUANTITY - the total used gas by all transactions in this block. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getBlockByHash\", \"params\": [\"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\", \"0x00\"], \"id\": 32}' // Result if 2nd parameter is '0x00' { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ { \"hash\" : \"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\" , \"number\" : \"0x1e\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5daefc26\" , \"coinbase\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"witness\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"parentHash\" : \"0x2a0b4c347f0d613d0523d710370bd65d8f0a7ac118381dacaef30960a14b8311\" , \"transactionRoot\" : \"0x66f87afba13a0eb2629c00cf536c6b4766d5d9eeb6b8e09f4b7e3f645716b0e5\" , \"stateRoot\" : \"0xc4b1f8c9c895cce78b4681e42616f5243919bcecf0005e8aec5c68e1119b48bb\" , \"nonce\" : \"0x1feb51e443cecf8f\" , \"data\" : \"\" , \"extra\" : \"\" , \"transactions\" : [ \"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\" ], \"size\" : \"0x0165\" , \"gasUsed\" : \"0x00\" } ] } // Result if 2nd parameter is '0x02' { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0xf90162b8b3f8b18400000000840000000080845daefc2688000000000000001e942b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294942b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294881feb51e443cecf8fa02a0b4c347f0d613d0523d710370bd65d8f0a7ac118381dacaef30960a14b8311a066f87afba13a0eb2629c00cf536c6b4766d5d9eeb6b8e09f4b7e3f645716b0e5a0c4b1f8c9c895cce78b4681e42616f5243919bcecf0005e8aec5c68e1119b48bb8080b8abf8a9b8a7f8a58400000000840000000080845daefbfc9466012c3c52b40b604081f240b099ad73a8e9abcd880000000005f5e10088000000000000000088000000000000000180a09245cb44760636e824b8835f2295af17f6313572663d62b01cb29e351bb5ea17b84101878ae393e9da43b50ea4cb130159007bb6495af2566fa8f9b58cfa19d66d98be55890390341ce04b8520a31496e338a0bba0a773ea6ae1b0661af612c8c60c01\" ] } be4_getBlockByNumber \u00b6 Returns information about a block by number. Parameters 1. QUANTITY|TAG - Integer of a block number, or the string \"earliest\" , \"latest\" , or \"pending\" , as in the default block parameter 1. NUMBER - If 0x00(default) it returns the transaction object(json) with tx hashes, if 0x01 it returns the transaction object(json) with tx object, if 0x02 it returns the raw block data ( block rlp ). Example Parameters JavaScript params : [ \"0x1e\" , // 30 \"0x01\" ] Returns See be4_getBlockByHash Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getBlockByNumber\", \"params\": [\"0x1e\", \"0x01\"], \"id\": 32}' // Result ( 2nd parameter is '0x01' ) { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ { \"hash\" : \"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\" , \"number\" : \"0x1e\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5daefc26\" , \"coinbase\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"witness\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"parentHash\" : \"0x2a0b4c347f0d613d0523d710370bd65d8f0a7ac118381dacaef30960a14b8311\" , \"transactionRoot\" : \"0x66f87afba13a0eb2629c00cf536c6b4766d5d9eeb6b8e09f4b7e3f645716b0e5\" , \"stateRoot\" : \"0xc4b1f8c9c895cce78b4681e42616f5243919bcecf0005e8aec5c68e1119b48bb\" , \"nonce\" : \"0x1feb51e443cecf8f\" , \"data\" : \"\" , \"extra\" : \"\" , \"transactions\" : [ { \"hash\" : \"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5daefbfc\" , \"from\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"to\" : \"0x66012c3c52b40b604081f240b099ad73a8e9abcd\" , \"value\" : \"0x05f5e100\" , \"gas\" : \"0x00\" , \"nonce\" : \"0x01\" , \"input\" : \"\" , \"extra\" : \"0x9245cb44760636e824b8835f2295af17f6313572663d62b01cb29e351bb5ea17\" , \"v\" : \"0x01\" , \"r\" : \"0x986dd619fa8cb5f9a86f56f25a49b67b00590113cba40eb543dae993e38a8701\" , \"s\" : \"0x0cc6c812f61a66b0e16aea73a7a0bba038e39614a320854be01c3490038955be\" , \"size\" : \"0xa7\" } ], \"size\" : \"0x0165\" , \"gasUsed\" : \"0x00\" } ] } be4_getTransactionByHash \u00b6 Returns the information about a transaction by transaction hash. Parameters DATA - Hash of a transaction Example Parameters JavaScript params : [ \"0x3fc20bc4542b0697990b0558fcda7a1d2aa10e5cacd6154b6dcf7377abd0ba64\" ] Returns Object - A Transaction object, or null when no transaction was found: * blockHash : DATA - hash of the block where this transaction was in. null when it is pending. * blockNumber : QUANTITY - block number where this transaction was in. null when it is pending. * transactionIndex : QUANTITY - integer of the transaction's index position in the block. null when it is pending. * hash : DATA - hash of the transaction. txid * chain : DATA - network id. * version : DATA - version. * timestamp : QUANTITY - the unix timestamp for when the transaction was created. * from : DATA - address of the sender. * to : DATA - address of the receiver. * value : QUANTITY - value transferred in beryl. * gas : QUANTITY - gas provided by the sender. * nonce : DATA - the number of transactions made by the sender prior to this one. * input : DATA - the data send along with the transaction. * extra : DATA - the \"extra data\" field of this transaction. * v : QUANTITY - ECDSA recovery id. * r : QUANTITY - ECDSA signature r. * s : QUANTITY - ECDSA signature s. * size ' : QUANTITY - integer the size of this transaction in bytes. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getTransactionByHash\", \"params\": [\"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\"], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ { \"blockNumber\" : \"0x1e\" , \"blockHash\" : \"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\" , \"transactionIndex\" : \"0x00\" , \"hash\" : \"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5daefbfc\" , \"from\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"to\" : \"0x66012c3c52b40b604081f240b099ad73a8e9abcd\" , \"value\" : \"0x05f5e100\" , \"gas\" : \"0x00\" , \"nonce\" : \"0x01\" , \"input\" : \"\" , \"extra\" : \"0x9245cb44760636e824b8835f2295af17f6313572663d62b01cb29e351bb5ea17\" , \"v\" : \"0x01\" , \"r\" : \"0x986dd619fa8cb5f9a86f56f25a49b67b00590113cba40eb543dae993e38a8701\" , \"s\" : \"0x0cc6c812f61a66b0e16aea73a7a0bba038e39614a320854be01c3490038955be\" , \"size\" : \"0xa7\" } ] } be4_getTransactionByBlockHashAndIndex \u00b6 Returns the information about a transaction by block hash and transaction index position. Parameters 1. DATA - Hash of a block. 1. QUANTITY - integer of the transaction index position. Example Parameters JavaScript params : [ \"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\" , \"0x00\" // 0 ] Returns See be4_getTransactionByHash Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getTransactionByBlockHashAndIndex\", \"params\": [\"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\", \"0x00\"], \"id\": 32}' Result See be4_getTransactionByHash be4_getTransactionByBlockNumberAndIndex \u00b6 Returns the information about a transaction by block number and transaction index position. Parameters 1. QUANTITY|TAG - a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter . 1. QUANTITY - the transaction index position. Example Parameters JavaScript params : [ \"0x63\" , // 99 \"0x00\" // 0 ] Returns See be4_getTransactionByHash Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getTransactionByBlockNumberAndIndex\", \"params\": [\"0x63\", \"0x00\"], \"id\": 32}' Result See be4_getTransactionByHash be4_getTransactionReceipt \u00b6 Returns the receipt of a transaction by transaction hash. Note That the receipt is not available for pending transactions. Parameters DATA - Hash of a transaction Example Parameters JavaScript params : [ \"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\" ] Returns Object - A Transaction receipt object, or null when no transaction was found: * blockHash : DATA - hash of the block where this transaction was in. * blockNumber : QUANTITY - block number where this transaction was in. * transactionIndex : QUANTITY - integer of the transaction's index position in the block. * hash : DATA - hash of the transaction. * chain : DATA - network id. * version : DATA - version. * timestamp : QUANTITY - the unix timestamp for when the transaction was created. * from : DATA - address of the sender. * to : DATA - address of the receiver. * value : QUANTITY - value transferred in beryl. * gas : QUANTITY - gas provided by the sender. * nonce : DATA - the number of transactions made by the sender prior to this one. * input : DATA - the data send along with the transaction. * extra : DATA - the \"extra data\" field of this transaction. * v : QUANTITY - ECDSA recovery id. * r : QUANTITY - ECDSA signature r. * s : QUANTITY - ECDSA signature s. * size : QUANTITY - integer the size of this transaction in bytes. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getTransactionReceipt\", \"params\": [\"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\"], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ { \"blockNumber\" : \"0x1e\" , \"blockHash\" : \"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\" , \"transactionIndex\" : \"0x00\" , \"hash\" : \"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5daefbfc\" , \"from\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"to\" : \"0x66012c3c52b40b604081f240b099ad73a8e9abcd\" , \"value\" : \"0x05f5e100\" , \"gas\" : \"0x00\" , \"nonce\" : \"0x01\" , \"input\" : \"\" , \"extra\" : \"0x9245cb44760636e824b8835f2295af17f6313572663d62b01cb29e351bb5ea17\" , \"v\" : \"0x01\" , \"r\" : \"0x986dd619fa8cb5f9a86f56f25a49b67b00590113cba40eb543dae993e38a8701\" , \"s\" : \"0x0cc6c812f61a66b0e16aea73a7a0bba038e39614a320854be01c3490038955be\" , \"size\" : \"0xa7\" } ] } be4_pendingTransactions \u00b6 Returns the pending transactions list. Parameters none Returns Array - a list of pending transactions. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_pendingTransactions\", \"params\": [], \"id\": 1}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ { \"hash\" : \"0x0459e243e528ff2319218239d11896136dd63b55ddb71877b14593f9b9d42d9c\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5dafff11\" , \"from\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"to\" : \"0xe9f5e6d433316e4abfeff8c40ac405b735129501\" , \"value\" : \"0x4a817c80\" , // 12.5 BRC \"gas\" : \"0x00\" , \"nonce\" : \"0x02\" , // 2 \"input\" : \"\" , \"extra\" : \"\" , \"v\" : \"0x00\" , \"r\" : \"0x82e9bea18a69d1aafe262729bc1a33e663e957cc05bb23453acb7b72440a0171\" , \"s\" : \"0x71b70b9c834e7e64b8f47f6212eef5752fdb3a45f7981db894683ad3b9117eff\" , \"size\" : \"0x83\" } ] } be4_getTransactionsByAddress \u00b6 Returns the transaction history of given address. Parameters 1. DATA - address to check history. 1. DATA - Hex string of start block number. (or latest ) 1. String - Sort type ( asc or desc ) 1. DATA - Hex string of transaction count to retreive. Example Parameters JavaScript params : [ \"0xe9f5e6d433316e4abfeff8c40ac405b735129501\" , \"latest\" , \"desc\" , \"0x14\" ] Returns Array of tx information. For tx object, See be4_getTransactionByHash Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getTransactionsByAddress\", \"params\": [{See above}], \"id\": 32}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ { \"hash\" : \"0x3c48c66329c426380ab945711dcdba4c52ee92ffea64171c0bf197310ad90f5b\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5db2c4eb\" , \"from\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"to\" : \"0xdb5e402f70b4f9a1b3d09ba9341ffa393823b71b\" , \"value\" : \"0x3b9aca00\" , \"gas\" : \"0x00\" , \"nonce\" : \"0x01\" , \"input\" : \"\" , \"extra\" : \"\" , \"v\" : \"0x01\" , \"r\" : \"0x10186e3715a4c93084d619237bb8b0395e4d29c94b093fd1bcba21e1332ba408\" , \"s\" : \"0x29556e35b26de22e4181f13690270243701fdb8f074cfcbc8043c713b918442d\" , \"size\" : \"0x6b\" }, { \"hash\" : \"0x9d6446ab8fffaea6feb949c97a6f87d84b6f029b049a6da12b6aee2ed7f704a0\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5db2c40b\" , \"from\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"to\" : \"0xe9f5e6d433316e4abfeff8c40ac405b735129501\" , \"value\" : \"0x3b9aca00\" , \"gas\" : \"0x00\" , \"nonce\" : \"0x00\" , \"input\" : \"\" , \"extra\" : \"\" , \"v\" : \"0x01\" , \"r\" : \"0xa092b41525f9082cd36426c28c80070356e11089fb20ebd1561e775ce2507ecc\" , \"s\" : \"0x61adca608288af6272dc8e7504f9707e06683aa5678e10516e4941bb03da0191\" , \"size\" : \"0x6b\" } ] }","title":"API References"},{"location":"api/#bryllitenet-json-rpc","text":"JSON is a lightweight data-interchange format. It can represent numbers, strings, ordered sequences of values, and collections of name/value pairs. JSON-RPC is a stateless, light-weight remote procedure call (RPC) protocol. Primarily this specification defines several data structures and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets, over HTTP, or in many various message passing environments. It uses JSON (RFC 4627) as data format.","title":"Bryllite.NET JSON-RPC"},{"location":"api/#json-rpc-endpoint","text":"Default JSON-RPC endpoints: Service URL Web4b http://localhost:8451","title":"JSON-RPC Endpoint"},{"location":"api/#hex-value-encoding","text":"At present there are two key datatypes that are passed over JSON: unformatted byte arrays and quantities. Both are passed with a hex encoding, however with different requirements to formatting: When encoding QUANTITIES (integers, numbers): encode as hex, prefix with \"0x\", the most compact representation (slight exception: zero should be represented as \"0x00\"). Examples: 0x41 ( 65 in decimal) 0x0400 ( 1024 in decimal) WRONG: 0x (should always have at least two digit - zero is 0x00 ) WRONG: 0x400 (hex string shoud be even digit - valid is 0x0400 ) WRONG: ff (must be prefixed 0x )","title":"Hex value encoding"},{"location":"api/#the-default-block-parameter","text":"The following methods have an extra default block parameter: be4_getBalance be4_getTransactionCount be4_getBlockTransactionCountByNumber be4_getBlockByNumber be4_getTransactionByBlockNumberAndIndex When requests are made that act on the state of bryllite, the last default block parameter determines the height of the block. The following options are possible for the defaultBlock parameter: HEX string - an integer block number String \"earliest\" - for the earliest/genesis block String \"latest\" - for the latest mined block String \"pending\" - for the pending state/transactions","title":"The Default block parameter"},{"location":"api/#curl-examples-explained","text":"The curl options below might return a response where the node complains about the content type, this is because the --data option sets the content type to application/x-www-form-urlencoded . If your node does complain, manually set the header by placing -H \"Content-Type: application/json\" at the start of the call. The examples also do not include the URL/IP & port combination which must be the last argument given to curl e.x. 127.0.0.1:9627","title":"Curl Examples Explained"},{"location":"api/#json-rpc-methods","text":"","title":"JSON-RPC Methods"},{"location":"api/#web4b-api","text":"web4b_getVersion web4b_getTime web4b_sha3 web4b_mining web4b_getWork web4b_submitWork","title":"WEB4B API"},{"location":"api/#net-api","text":"net_listening net_getAuthoprizedPeersRootHash net_getAuthorizedPeersCount net_getAuthorizedPeers","title":"NET API"},{"location":"api/#admin-api","text":"admin_addPeer admin_removePeer admin_startMiner admin_stopMiner","title":"ADMIN API"},{"location":"api/#be4-api","text":"be4_coinbase be4_blockNumber be4_getBalance be4_getTransactionCount be4_getBlockTransactionCountByHash be4_getBlockTransactionCountByNumber be4_sendRawTransaction be4_getBlockByHash be4_getBlockByNumber be4_getTransactionByHash be4_getTransactionByBlockHashAndIndex be4_getTransactionByBlockNumberAndIndex be4_getTransactionReceipt be4_pendingTransactions be4_getTransactionsByAddress","title":"BE4 API"},{"location":"api/#json-rpc-api-references","text":"","title":"JSON RPC API References"},{"location":"api/#web4b_getversion","text":"Returns the current node version. Parameters None Returns String - The current version Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"web4b_getVersion\", \"params\": [], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ \"0.8.2-alpha\" ] }","title":"web4b_getVersion"},{"location":"api/#web4b_gettime","text":"Returns the current node time. See Unix Epoch Time Parameters None Returns QUANTITY - Hex string of unix epoch time in milliseconds. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"web4b_getTime\", \"params\": [], \"id\": 32}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0x016f6fe9fdc8\" // 1,578,130,603,464 (2020\ub144 January 4\uc77c Saturday AM 9:36:43.464) ] }","title":"web4b_getTime"},{"location":"api/#web4b_sha3","text":"Returns Keccak-256 ( not the standardized SHA3-256 ) of the given data. Parameters 1. DATA - Hex string of the data to convert into a SHA3 hash. Example Parameters JavaScript \"params\" : [ \"0x68656c6c6f20776f726c64\" ] Returns DATA - Hex string of the SHA3 result of the given data. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"web4b_sha3\", \"params\": [\"0x68656c6c6f20776f726c64\"], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\" ] }","title":"web4b_sha3"},{"location":"api/#web4b_mining","text":"Returns true if node is actively mining new blocks. Parameters None Retruns Boolean - returns true of the node is mining, otherwise false . Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"web4b_mining\", \"params\": [], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ true ] }","title":"web4b_mining"},{"location":"api/#web4b_getwork","text":"Returns the hash of the current block, the seedHash, and the boundary condition to be met (\"target\"). Parameters None Retruns Array - Array with the following properties: DATA , 32 Bytes - current block header pow-hash DATA , 32 Bytes - the seed hash used for the DAG. DATA , 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"web4b_getWork\", \"params\": [], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\" , \"0x5EED00000000000000000000000000005EED0000000000000000000000000000\" , \"0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000\" ] }","title":"web4b_getWork"},{"location":"api/#web4b_submitwork","text":"Used for submitting a proof-of-activity solution. Parameters 1. DATA , 8 Bytes - The nonce found (64 bits) 1. DATA , 32 Bytes - The header's poa-hash (256 bits) 1. DATA , 32 Bytes - The mix digest (256 bits) Retruns Boolean - returns true if the provided solution is valid, otherwise false. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"web4b_getWork\", \"params\": [ \"0x0000000000000001\", \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\", \"0xD1GE5700000000000000000000000000D1GE5700000000000000000000000000\" ], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ true ] }","title":"web4b_submitWork"},{"location":"api/#net_listening","text":"Returns true if node is listening on BCP port. Parameters None Retruns Boolean - returns true of the node is listening on BCP port, otherwise false . Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"net_listening\", \"params\": [], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ true ] }","title":"net_listening"},{"location":"api/#net_getauthorizedpeersroothash","text":"Returns authorized peers root hash. Parameters None Retruns DATA - Hex string of authorized peers root hash Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"net_getAuthorizedPeersRootHash\", \"params\": [], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0xe235933bcacd7f464c4c4a9a7875dbaefc6d36a233eef318048c8ecb6adecb99\" ] }","title":"net_getAuthorizedPeersRootHash"},{"location":"api/#net_getauthorizedpeerscount","text":"Returns authorized peers count. Parameters None. Retruns DATA - Hex string of authorized peers count. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"net_getAuthorizedPeersCount\", \"params\": [], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ \"0x03\" ] }","title":"net_getAuthorizedPeersCount"},{"location":"api/#net_getauthorizedpeers","text":"Returns authorized peers. Parameters 1. DATA - Hex string of authorized peers root hash. Retruns Array - Array of authorized peers enode. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"net_getAuthorizedPeers\", \"params\": [\"0xe235933bcacd7f464c4c4a9a7875dbaefc6d36a233eef318048c8ecb6adecb99\"], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ \"enode://0x02cae79e5203828cd869aebcf79b6257c687accf06540012a19ddc9549b385ce9e@eu-central.static.bryllite.com:8451/?rpcport=9627&q=static\" , \"enode://0x034932efd3d424042945ad10c228d4eb903f9a266049aec69f91598c54e8f047a8@asia-east.static.bryllite.com:8451/?rpcport=9627&q=static\" , \"enode://0x0363cfe2d20f2e9faadf0c23beb5b0b1f410f8e8a35293e0d72e6f437a086e7d45@us-east.static.bryllite.com:8451/?rpcport=9627&q=static\" ] }","title":"net_getAuthorizedPeers"},{"location":"api/#admin_addpeer","text":"Append peer's enode in authorized peers. Parameters 1. String - enode of peer to append. 1. DATA - Hex string of timestamp in milliseconds. 1. DATA - Hex string of signature signed by node key. Example Parameters JavaScript params : [ 'enode://0x0363cfe2d20f2e9faadf0c23beb5b0b1f410f8e8a35293e0d72e6f437a086e7d45@us-east.static.bryllite.net:8452/' , '0x0181e78d9788' , '0xdad7b6baf280ef8bf98e9a33fc19230820cd0ea4459210ddb8e821eed1df9d62' ] Retruns 1. Boolean - Result of request. 1. String - Hex string of authorized peers root hash or error message if request failed. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"admin_addPeer\", \"params\":[{see above}], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ true , \"0xe235933bcacd7f464c4c4a9a7875dbaefc6d36a233eef318048c8ecb6adecb99\" ] }","title":"admin_addPeer"},{"location":"api/#admin_removepeer","text":"Remove peer's enode in authorized peers. Parameters 1. String - enode of peer to remove. 1. DATA - Hex string of timestamp in milliseconds. 1. DATA - Hex string of signature signed by node key. Example Parameters JavaScript params : [ 'enode://0x0363cfe2d20f2e9faadf0c23beb5b0b1f410f8e8a35293e0d72e6f437a086e7d45@us-east.static.bryllite.net:8452/' , '0x0181e78d9788' , '0xdad7b6baf280ef8bf98e9a33fc19230820cd0ea4459210ddb8e821eed1df9d62' ] Retruns 1. Boolean - Result of request. 1. String - Hex string of authorized peers root hash or error message if request failed. Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"admin_removePeer\", \"params\":[{see above}], \"id\": 0}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 0 , \"result\" : [ true , \"0xe235933bcacd7f464c4c4a9a7875dbaefc6d36a233eef318048c8ecb6adecb99\" ] }","title":"admin_removePeer"},{"location":"api/#be4_coinbase","text":"Returns the node coinbase address. Parameters none Returns DATA - the current coinbase address. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_coinbase\", \"params\": [], \"id\": 64}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 64 , \"result\" : [ \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" ] }","title":"be4_coinbase"},{"location":"api/#be4_blocknumber","text":"Returns the number of most recent block. Parameters none Returns QUANTITY - integer of the current block number the node is on. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_blockNumber\", \"params\": [], \"id\": 1}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : [ \"0x64\" // 100 ] }","title":"be4_blockNumber"},{"location":"api/#be4_getbalance","text":"Returns the balance of the account of given address. Parameters 1. DATA - address to check for balance. 1. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters JavaScript params : [ \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"latest\" ] Returns QUANTITY - integer of the current balance in beryl. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getBalance\", \"params\": [\"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\", \"latest\"], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0xe662cbc700\" // 989500000000 (98.95 BRC) ] }","title":"be4_getBalance"},{"location":"api/#be4_gettransactioncount","text":"Returns the number of transactions sent from an address. a.k.a nonce Parameters 1. DATA - address to check for balance. 1. QUANTITY|TAG - integer block number, or the string \"latest\" , \"earliest\" or \"pending\" , see the default block parameter Example Parameters JavaScript params : [ \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"pending\" ] Returns QUANTITY - integer of the number of transactions send from given address. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getTransactionCount\", \"params\": [\"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\", \"pending\"], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0x05\" // 5 ] }","title":"be4_getTransactionCount"},{"location":"api/#be4_getblocktransactioncountbyhash","text":"Returns the number of transactions in a block matching the given block hash. Parameters DATA - hash of a block. Example Parameters JavaScript params : [ \"0x89c11a7d8e927431d453f46c0ad1cfbbd50e39aac450d907d1b8768667d01a0c\" ] Returns QUANTITY - integer of the number of transactions in this block. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getBlockTransactionCountByHash\", \"params\": [\"0x89c11a7d8e927431d453f46c0ad1cfbbd50e39aac450d907d1b8768667d01a0c\"], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0x01\" ] }","title":"be4_getBlockTransactionCountByHash"},{"location":"api/#be4_getblocktransactioncountbynumber","text":"Returns the number of transactions in a block matching the given block number. Parameters QUANTITY|TAG - integer of a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter Example Parameters JavaScript params : [ \"0x63\" // 99 ] Returns QUANTITY - integer of the number of transactions in this block. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getBlockTransactionCountByNumber\", \"params\": [\"0x63\"], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0x01\" ] }","title":"be4_getBlockTransactionCountByNumber"},{"location":"api/#be4_sendrawtransaction","text":"Creates new message call transaction or a contract creation for signed transaction. Parameters DATA - The signed transaction data. See web4b.cs for transaction data inside. Example Parameters JavaScript params : [ \"0xf8818400000000840000000080845daae45094e9f5e6d433316e4abfeff8c40ac405b735129501880000000005f5e10084000000008800000000000000008080b841732f528f57e1b0aea54d9bd6a9b250770a2389eeaa202675d9f5845c005bf65d80d37c68d7f04bfd8d9aea8d45b5ee3b504c433dcfc7dd75fe0b11d56867fa3301\" ] Returns DATA - the transaction hash, or json-rpc error object if tx not executable. Use be4_getTransactionReceipt to get result of transaction. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_sendRawTransaction\", \"params\": [{see above}], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0x3fc20bc4542b0697990b0558fcda7a1d2aa10e5cacd6154b6dcf7377abd0ba64\" ] }","title":"be4_sendRawTransaction"},{"location":"api/#be4_getblockbyhash","text":"Returns information about a block by hash. Parameters 1. DATA - Hash of a block. 1. NUMBER - If 0x00(default) it returns the transaction object(json) with tx hashes, if 0x01 it returns the transaction object(json) with tx object, if 0x02 it returns the raw block data ( block rlp ). Example Parameters JavaScript params : [ \"0x89c11a7d8e927431d453f46c0ad1cfbbd50e39aac450d907d1b8768667d01a0c\" , \"0x00\" ] Returns Object - A block object or block rlp hex string, or null when no block was found: * hash : DATA - hash of the block. * number : QUANTITY - the block number. * chainId : DATA - network id. * version : DATA - version. * timestamp : QUANTITY - the unix timestamp for when the block was collated. * coinbase : DATA - the address of the beneficiary to whom the mining rewards were given. * witness : DATA - the address of witness providing share by proof-of-attendance. * parentHash : DATA - hash of the parent block. * transactionRoot : DATA - the root of the transaction trie of the block. * stateRoot : DATA - the root of the final state trie of the block. * nonce : DATA - nonce. * data : DATA - data. * extra : DATA - the \"extra data\" field of this block. * transactions : Array - Array of transaction objects, or array of txid depending on the given parameter. * size : QUANTITY - integer the size of this block in bytes. * gasUsed : QUANTITY - the total used gas by all transactions in this block. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getBlockByHash\", \"params\": [\"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\", \"0x00\"], \"id\": 32}' // Result if 2nd parameter is '0x00' { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ { \"hash\" : \"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\" , \"number\" : \"0x1e\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5daefc26\" , \"coinbase\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"witness\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"parentHash\" : \"0x2a0b4c347f0d613d0523d710370bd65d8f0a7ac118381dacaef30960a14b8311\" , \"transactionRoot\" : \"0x66f87afba13a0eb2629c00cf536c6b4766d5d9eeb6b8e09f4b7e3f645716b0e5\" , \"stateRoot\" : \"0xc4b1f8c9c895cce78b4681e42616f5243919bcecf0005e8aec5c68e1119b48bb\" , \"nonce\" : \"0x1feb51e443cecf8f\" , \"data\" : \"\" , \"extra\" : \"\" , \"transactions\" : [ \"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\" ], \"size\" : \"0x0165\" , \"gasUsed\" : \"0x00\" } ] } // Result if 2nd parameter is '0x02' { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ \"0xf90162b8b3f8b18400000000840000000080845daefc2688000000000000001e942b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294942b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294881feb51e443cecf8fa02a0b4c347f0d613d0523d710370bd65d8f0a7ac118381dacaef30960a14b8311a066f87afba13a0eb2629c00cf536c6b4766d5d9eeb6b8e09f4b7e3f645716b0e5a0c4b1f8c9c895cce78b4681e42616f5243919bcecf0005e8aec5c68e1119b48bb8080b8abf8a9b8a7f8a58400000000840000000080845daefbfc9466012c3c52b40b604081f240b099ad73a8e9abcd880000000005f5e10088000000000000000088000000000000000180a09245cb44760636e824b8835f2295af17f6313572663d62b01cb29e351bb5ea17b84101878ae393e9da43b50ea4cb130159007bb6495af2566fa8f9b58cfa19d66d98be55890390341ce04b8520a31496e338a0bba0a773ea6ae1b0661af612c8c60c01\" ] }","title":"be4_getBlockByHash"},{"location":"api/#be4_getblockbynumber","text":"Returns information about a block by number. Parameters 1. QUANTITY|TAG - Integer of a block number, or the string \"earliest\" , \"latest\" , or \"pending\" , as in the default block parameter 1. NUMBER - If 0x00(default) it returns the transaction object(json) with tx hashes, if 0x01 it returns the transaction object(json) with tx object, if 0x02 it returns the raw block data ( block rlp ). Example Parameters JavaScript params : [ \"0x1e\" , // 30 \"0x01\" ] Returns See be4_getBlockByHash Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getBlockByNumber\", \"params\": [\"0x1e\", \"0x01\"], \"id\": 32}' // Result ( 2nd parameter is '0x01' ) { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ { \"hash\" : \"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\" , \"number\" : \"0x1e\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5daefc26\" , \"coinbase\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"witness\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"parentHash\" : \"0x2a0b4c347f0d613d0523d710370bd65d8f0a7ac118381dacaef30960a14b8311\" , \"transactionRoot\" : \"0x66f87afba13a0eb2629c00cf536c6b4766d5d9eeb6b8e09f4b7e3f645716b0e5\" , \"stateRoot\" : \"0xc4b1f8c9c895cce78b4681e42616f5243919bcecf0005e8aec5c68e1119b48bb\" , \"nonce\" : \"0x1feb51e443cecf8f\" , \"data\" : \"\" , \"extra\" : \"\" , \"transactions\" : [ { \"hash\" : \"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5daefbfc\" , \"from\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"to\" : \"0x66012c3c52b40b604081f240b099ad73a8e9abcd\" , \"value\" : \"0x05f5e100\" , \"gas\" : \"0x00\" , \"nonce\" : \"0x01\" , \"input\" : \"\" , \"extra\" : \"0x9245cb44760636e824b8835f2295af17f6313572663d62b01cb29e351bb5ea17\" , \"v\" : \"0x01\" , \"r\" : \"0x986dd619fa8cb5f9a86f56f25a49b67b00590113cba40eb543dae993e38a8701\" , \"s\" : \"0x0cc6c812f61a66b0e16aea73a7a0bba038e39614a320854be01c3490038955be\" , \"size\" : \"0xa7\" } ], \"size\" : \"0x0165\" , \"gasUsed\" : \"0x00\" } ] }","title":"be4_getBlockByNumber"},{"location":"api/#be4_gettransactionbyhash","text":"Returns the information about a transaction by transaction hash. Parameters DATA - Hash of a transaction Example Parameters JavaScript params : [ \"0x3fc20bc4542b0697990b0558fcda7a1d2aa10e5cacd6154b6dcf7377abd0ba64\" ] Returns Object - A Transaction object, or null when no transaction was found: * blockHash : DATA - hash of the block where this transaction was in. null when it is pending. * blockNumber : QUANTITY - block number where this transaction was in. null when it is pending. * transactionIndex : QUANTITY - integer of the transaction's index position in the block. null when it is pending. * hash : DATA - hash of the transaction. txid * chain : DATA - network id. * version : DATA - version. * timestamp : QUANTITY - the unix timestamp for when the transaction was created. * from : DATA - address of the sender. * to : DATA - address of the receiver. * value : QUANTITY - value transferred in beryl. * gas : QUANTITY - gas provided by the sender. * nonce : DATA - the number of transactions made by the sender prior to this one. * input : DATA - the data send along with the transaction. * extra : DATA - the \"extra data\" field of this transaction. * v : QUANTITY - ECDSA recovery id. * r : QUANTITY - ECDSA signature r. * s : QUANTITY - ECDSA signature s. * size ' : QUANTITY - integer the size of this transaction in bytes. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getTransactionByHash\", \"params\": [\"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\"], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ { \"blockNumber\" : \"0x1e\" , \"blockHash\" : \"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\" , \"transactionIndex\" : \"0x00\" , \"hash\" : \"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5daefbfc\" , \"from\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"to\" : \"0x66012c3c52b40b604081f240b099ad73a8e9abcd\" , \"value\" : \"0x05f5e100\" , \"gas\" : \"0x00\" , \"nonce\" : \"0x01\" , \"input\" : \"\" , \"extra\" : \"0x9245cb44760636e824b8835f2295af17f6313572663d62b01cb29e351bb5ea17\" , \"v\" : \"0x01\" , \"r\" : \"0x986dd619fa8cb5f9a86f56f25a49b67b00590113cba40eb543dae993e38a8701\" , \"s\" : \"0x0cc6c812f61a66b0e16aea73a7a0bba038e39614a320854be01c3490038955be\" , \"size\" : \"0xa7\" } ] }","title":"be4_getTransactionByHash"},{"location":"api/#be4_gettransactionbyblockhashandindex","text":"Returns the information about a transaction by block hash and transaction index position. Parameters 1. DATA - Hash of a block. 1. QUANTITY - integer of the transaction index position. Example Parameters JavaScript params : [ \"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\" , \"0x00\" // 0 ] Returns See be4_getTransactionByHash Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getTransactionByBlockHashAndIndex\", \"params\": [\"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\", \"0x00\"], \"id\": 32}' Result See be4_getTransactionByHash","title":"be4_getTransactionByBlockHashAndIndex"},{"location":"api/#be4_gettransactionbyblocknumberandindex","text":"Returns the information about a transaction by block number and transaction index position. Parameters 1. QUANTITY|TAG - a block number, or the string \"earliest\" , \"latest\" or \"pending\" , as in the default block parameter . 1. QUANTITY - the transaction index position. Example Parameters JavaScript params : [ \"0x63\" , // 99 \"0x00\" // 0 ] Returns See be4_getTransactionByHash Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getTransactionByBlockNumberAndIndex\", \"params\": [\"0x63\", \"0x00\"], \"id\": 32}' Result See be4_getTransactionByHash","title":"be4_getTransactionByBlockNumberAndIndex"},{"location":"api/#be4_gettransactionreceipt","text":"Returns the receipt of a transaction by transaction hash. Note That the receipt is not available for pending transactions. Parameters DATA - Hash of a transaction Example Parameters JavaScript params : [ \"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\" ] Returns Object - A Transaction receipt object, or null when no transaction was found: * blockHash : DATA - hash of the block where this transaction was in. * blockNumber : QUANTITY - block number where this transaction was in. * transactionIndex : QUANTITY - integer of the transaction's index position in the block. * hash : DATA - hash of the transaction. * chain : DATA - network id. * version : DATA - version. * timestamp : QUANTITY - the unix timestamp for when the transaction was created. * from : DATA - address of the sender. * to : DATA - address of the receiver. * value : QUANTITY - value transferred in beryl. * gas : QUANTITY - gas provided by the sender. * nonce : DATA - the number of transactions made by the sender prior to this one. * input : DATA - the data send along with the transaction. * extra : DATA - the \"extra data\" field of this transaction. * v : QUANTITY - ECDSA recovery id. * r : QUANTITY - ECDSA signature r. * s : QUANTITY - ECDSA signature s. * size : QUANTITY - integer the size of this transaction in bytes. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getTransactionReceipt\", \"params\": [\"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\"], \"id\": 32}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ { \"blockNumber\" : \"0x1e\" , \"blockHash\" : \"0xfc205eea221ce9ac3e616f97b048e2a39838b6475fd886922a743b0dbe6ec5a7\" , \"transactionIndex\" : \"0x00\" , \"hash\" : \"0xced8923848413a02869d715943d37b6c085d3b30eb536b5ae7d7db25edad28c3\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5daefbfc\" , \"from\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"to\" : \"0x66012c3c52b40b604081f240b099ad73a8e9abcd\" , \"value\" : \"0x05f5e100\" , \"gas\" : \"0x00\" , \"nonce\" : \"0x01\" , \"input\" : \"\" , \"extra\" : \"0x9245cb44760636e824b8835f2295af17f6313572663d62b01cb29e351bb5ea17\" , \"v\" : \"0x01\" , \"r\" : \"0x986dd619fa8cb5f9a86f56f25a49b67b00590113cba40eb543dae993e38a8701\" , \"s\" : \"0x0cc6c812f61a66b0e16aea73a7a0bba038e39614a320854be01c3490038955be\" , \"size\" : \"0xa7\" } ] }","title":"be4_getTransactionReceipt"},{"location":"api/#be4_pendingtransactions","text":"Returns the pending transactions list. Parameters none Returns Array - a list of pending transactions. Example JavaScript // Request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_pendingTransactions\", \"params\": [], \"id\": 1}' // Result { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ { \"hash\" : \"0x0459e243e528ff2319218239d11896136dd63b55ddb71877b14593f9b9d42d9c\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5dafff11\" , \"from\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"to\" : \"0xe9f5e6d433316e4abfeff8c40ac405b735129501\" , \"value\" : \"0x4a817c80\" , // 12.5 BRC \"gas\" : \"0x00\" , \"nonce\" : \"0x02\" , // 2 \"input\" : \"\" , \"extra\" : \"\" , \"v\" : \"0x00\" , \"r\" : \"0x82e9bea18a69d1aafe262729bc1a33e663e957cc05bb23453acb7b72440a0171\" , \"s\" : \"0x71b70b9c834e7e64b8f47f6212eef5752fdb3a45f7981db894683ad3b9117eff\" , \"size\" : \"0x83\" } ] }","title":"be4_pendingTransactions"},{"location":"api/#be4_gettransactionsbyaddress","text":"Returns the transaction history of given address. Parameters 1. DATA - address to check history. 1. DATA - Hex string of start block number. (or latest ) 1. String - Sort type ( asc or desc ) 1. DATA - Hex string of transaction count to retreive. Example Parameters JavaScript params : [ \"0xe9f5e6d433316e4abfeff8c40ac405b735129501\" , \"latest\" , \"desc\" , \"0x14\" ] Returns Array of tx information. For tx object, See be4_getTransactionByHash Example JavaScript // request curl - X POST -- data '{\"jsonrpc\": \"2.0\", \"method\": \"be4_getTransactionsByAddress\", \"params\": [{See above}], \"id\": 32}' // response { \"jsonrpc\" : \"2.0\" , \"id\" : 32 , \"result\" : [ { \"hash\" : \"0x3c48c66329c426380ab945711dcdba4c52ee92ffea64171c0bf197310ad90f5b\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5db2c4eb\" , \"from\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"to\" : \"0xdb5e402f70b4f9a1b3d09ba9341ffa393823b71b\" , \"value\" : \"0x3b9aca00\" , \"gas\" : \"0x00\" , \"nonce\" : \"0x01\" , \"input\" : \"\" , \"extra\" : \"\" , \"v\" : \"0x01\" , \"r\" : \"0x10186e3715a4c93084d619237bb8b0395e4d29c94b093fd1bcba21e1332ba408\" , \"s\" : \"0x29556e35b26de22e4181f13690270243701fdb8f074cfcbc8043c713b918442d\" , \"size\" : \"0x6b\" }, { \"hash\" : \"0x9d6446ab8fffaea6feb949c97a6f87d84b6f029b049a6da12b6aee2ed7f704a0\" , \"chain\" : \"0x00\" , \"version\" : \"0x00\" , \"timestamp\" : \"0x5db2c40b\" , \"from\" : \"0x2b8c9ac4d8783e0c16c950e1a6c0b4f73eb7f294\" , \"to\" : \"0xe9f5e6d433316e4abfeff8c40ac405b735129501\" , \"value\" : \"0x3b9aca00\" , \"gas\" : \"0x00\" , \"nonce\" : \"0x00\" , \"input\" : \"\" , \"extra\" : \"\" , \"v\" : \"0x01\" , \"r\" : \"0xa092b41525f9082cd36426c28c80070356e11089fb20ebd1561e775ce2507ecc\" , \"s\" : \"0x61adca608288af6272dc8e7504f9707e06683aa5678e10516e4941bb03da0191\" , \"size\" : \"0x6b\" } ] }","title":"be4_getTransactionsByAddress"},{"location":"p2p/","text":"Cosmic P2P \u00b6 Cosmic.P2P is a grid network solution as a subsystem of Bryllite.NET that enables real-time inter-node consensus in a blockchain network What is Bryllite.NET \u00b6 Bryllite.NET is a consortium blockchain platform service developed with the goal of sharing payment and economic systems with each other by connecting the payment and economic systems of independent game services into one ecosystem The video below makes it easy to understand the Bryllite.NET platform The Bryllite.NET project can be found here Why We need Cosmic.P2P \u00b6 Double-Spending Issue \u00b6 Most blockchain platforms, including Bitcoin and Ethereum, create Blocks through hash competition and consensus among nodes. Aside from the controversy over the excessive energy consumed in this process, Block generation consensus through hash competition can cause double-spending issue. Even if a node creates the n'th Block and processes the transaction for that Block, if another node creates the n', n'+1 Block first, As block n is replaced with block n', transactions that have already been processed may be invalidated. This is like purchasing coffee through cryptocurrency payment at Starbucks, and after a certain period of time, the payment becomes invalid and the cryptocurrency balance becomes available again. This problem is called the double-spending issue, and each blockchain platform avoids the double-spending issue by waiting for the creation of N Blocks. Cannot be used as money in real world \u00b6 Waiting for the creation of N Blocks means that the time consumed for payment increases dramatically. In the case of Bitcoin, which is known to have an average Block generation time of about 10 minutes, generally wait for 6 Blocks to be created before confirming the transaction, In the case of Ethereum, where the average Block creation time is about 15 seconds, the transaction is confirmed after waiting for the creation of 12 - 48 Blocks. That is, even if my transaction is included in the Block and the transaction is approved, the transaction is confirmed after waiting at least a few minutes to an hour. This makes it almost impossible for us to buy coffee with cryptocurrency payments at Starbucks and the like. Real-Time Inter-Node Consensus \u00b6 The long waiting time for transaction confirmation is caused by the double-spending issue and the waiting time to generate N Blocks to avoid it. The double-spending problem occurs because each node participating in the network competes by generating Blocks independently, and as a result of the competition, blocks generated by a node may be overwritten by Blocks generated by other nodes. If all nodes participating in the network can cooperatively agree on Block generation at the same time and the Block created cannot be overwritten, the waiting time for transaction confirmation will be dramatically reduced. The Need of Cosmic.P2P \u00b6 Cosmic.P2P is a grid networking solution designed to allow all nodes participating in the network to agree in real time. We can agree to Block creation through Cosmic.P2P, or agree to confirm the transaction for pending transactions. HOW IT WORKS \u00b6 Basic Principle of Cosmic.P2P Operation \u00b6 Mining nodes participating in the network know the addresses of all mining nodes participating in the network through the Node Discovery Service If one node(sender) wants to send a message to the entire network, The sender determines the layout of the grid based on the size of the mining node participating in the network. The layout expressed in a 3D-Coordinates system of [x, y, z]. (E.g. layout = [3, 3, 3]) Reference: Layout Decision based on nPeers The coordinates of each node are deterministic by the layout. Reference: Computing the Coordinates of a node The sender randomly selects one of the nodes belonging to the grid and transmits a message to the node, The recipient receiving this message relays the message to all nodes in the grid. If the sender is included in the grid while selecting one of the nodes belonging to the grid, always select the sender. If the message transfer to the selected node fails, select the next node and send it again. Depending on the layout, the relay is done in the order of z-axis, y-axis, x-axis. Reference: How message broadcasting works Layout Decision based on nPeers \u00b6 The layout is determined by the sender when sending message, and is determined by the number( nPeers ) of nodes participating in the entire network and the number( N ) of nodes to be included in a grid. N: Number of nodes to include in one grid nPeers: The total number of nodes participating in the network The figure below shows how to determine the layout according to the number of total nodes participating in the network( nPeers ) and the number of nodes to be included in a grid( N ) Each box in the above figure has about N nodes Computing the Coordinates of a node \u00b6 The Coordinates of the node are determined by extracting the hx , hy , and hz values from the hash value of the node address, and performing the remaining operations on each coordinate axis size of the layout CoordinatesOf(Node).X = 1 + ( hx mod layout.X ) CoordinatesOf(Node).Y = 1 + ( hy mod layout.Y ) CoordinatesOf(Node).Z = 1 + ( hz mod layout.Z ) These coordinates are deterministic according to the address of the nodes and layout, and they are uniformly distributed in each grid How message broadcasting works \u00b6 For example, if you have 81 participating nodes and the layout is [3, 3, 3] , you can describe message broadcasting as follows: One box in the figure below contains about 3 nodes. Z-Axis message transmission \u00b6 If the size of the layout's z-axis is greater than 1, the entire node is divided by the z coordinates as shown below, and the message is relayed to each coordinate. * Sends a message to one randomly selected node among all nodes with a z-axis coordinate of 1 ( In this case, since the sender is included, select the sender ) * Sends a message to one randomly selected node among all nodes with a z-axis coordiate of 2 * Sends a message to one randomly selected node among all nodes with a z-axis coordiate of 3 * The node received this message relays the message on the Y axis in the same ways as the Y Axis message transmission below Y-Axis message transmission \u00b6 If the size of the layout's y-axis is greater than 1, the entire node is divided by the y coordinates as show below, and the message is relayed to each coordinate. When relaying messages received via Z-Axis message transmission to the Y-Axis, the range of the entire node is limited to the corresponding z-axis coordinates * Sends a message to one randomly selected node among all nodes with a y-axis coordinates of 1 * Sends a message to one randomly selected node among all nodes with a y-axis coordinates of 2 ( In this case, since the sender is included, select the sender ) * Sends a message to one randomly selected node among all nodes with a y-axis coordinates of 3 * The node received this message relays the message on the X axis in the same ways as the X Axis message transmission below X-Axis message transmission \u00b6 If the size of the layout's x-axis is greater than 1, the entire node is divided by the x coordinates shown below, and the message is relayed to each coordinate. When relaying message received via Y-Axis message transmission to the X-Axis, the range of the entire node is limited to the corresponding z-axis coordinates and y-axis coordinates Sends a message to one randomly selected node among all nodes with a x-axis coordinates of 1 Sends a message to one randonly selected node among all nodes with a x-axis coordinates of 2 ( In this case, since the sender in included, select the sender ) Sends a message to one randonly selected node among all nodes with a x-axis coordinates of 3 The node that receives this message sends a message to all nodes that belong to that coordinate. This process completes the message broadcasting to the entire network Coverage \u00b6 A node can broadcast to N ^ 4 nodes with N * 4 send call. A node can broadcast to 4,096 nodes with 32 send call ( if N = 8 ) A node can broadcast to 65,536 nodes with 64 send call ( if N = 16 ) A node can broadcast to 1,048,576 nodes with 128 send call ( if N = 32 ) And also can be extended to 4D-Coordiantes system( x, y, z, w ) A node can broadcast to N ^ 5 nodes with N * 5 send call on 4D-Coordinates system.","title":"Cosmic P2P"},{"location":"p2p/#cosmic-p2p","text":"Cosmic.P2P is a grid network solution as a subsystem of Bryllite.NET that enables real-time inter-node consensus in a blockchain network","title":"Cosmic P2P"},{"location":"p2p/#what-is-bryllitenet","text":"Bryllite.NET is a consortium blockchain platform service developed with the goal of sharing payment and economic systems with each other by connecting the payment and economic systems of independent game services into one ecosystem The video below makes it easy to understand the Bryllite.NET platform The Bryllite.NET project can be found here","title":"What is Bryllite.NET"},{"location":"p2p/#why-we-need-cosmicp2p","text":"","title":"Why We need Cosmic.P2P"},{"location":"p2p/#double-spending-issue","text":"Most blockchain platforms, including Bitcoin and Ethereum, create Blocks through hash competition and consensus among nodes. Aside from the controversy over the excessive energy consumed in this process, Block generation consensus through hash competition can cause double-spending issue. Even if a node creates the n'th Block and processes the transaction for that Block, if another node creates the n', n'+1 Block first, As block n is replaced with block n', transactions that have already been processed may be invalidated. This is like purchasing coffee through cryptocurrency payment at Starbucks, and after a certain period of time, the payment becomes invalid and the cryptocurrency balance becomes available again. This problem is called the double-spending issue, and each blockchain platform avoids the double-spending issue by waiting for the creation of N Blocks.","title":"Double-Spending Issue"},{"location":"p2p/#cannot-be-used-as-money-in-real-world","text":"Waiting for the creation of N Blocks means that the time consumed for payment increases dramatically. In the case of Bitcoin, which is known to have an average Block generation time of about 10 minutes, generally wait for 6 Blocks to be created before confirming the transaction, In the case of Ethereum, where the average Block creation time is about 15 seconds, the transaction is confirmed after waiting for the creation of 12 - 48 Blocks. That is, even if my transaction is included in the Block and the transaction is approved, the transaction is confirmed after waiting at least a few minutes to an hour. This makes it almost impossible for us to buy coffee with cryptocurrency payments at Starbucks and the like.","title":"Cannot be used as money in real world"},{"location":"p2p/#real-time-inter-node-consensus","text":"The long waiting time for transaction confirmation is caused by the double-spending issue and the waiting time to generate N Blocks to avoid it. The double-spending problem occurs because each node participating in the network competes by generating Blocks independently, and as a result of the competition, blocks generated by a node may be overwritten by Blocks generated by other nodes. If all nodes participating in the network can cooperatively agree on Block generation at the same time and the Block created cannot be overwritten, the waiting time for transaction confirmation will be dramatically reduced.","title":"Real-Time Inter-Node Consensus"},{"location":"p2p/#the-need-of-cosmicp2p","text":"Cosmic.P2P is a grid networking solution designed to allow all nodes participating in the network to agree in real time. We can agree to Block creation through Cosmic.P2P, or agree to confirm the transaction for pending transactions.","title":"The Need of Cosmic.P2P"},{"location":"p2p/#how-it-works","text":"","title":"HOW IT WORKS"},{"location":"p2p/#basic-principle-of-cosmicp2p-operation","text":"Mining nodes participating in the network know the addresses of all mining nodes participating in the network through the Node Discovery Service If one node(sender) wants to send a message to the entire network, The sender determines the layout of the grid based on the size of the mining node participating in the network. The layout expressed in a 3D-Coordinates system of [x, y, z]. (E.g. layout = [3, 3, 3]) Reference: Layout Decision based on nPeers The coordinates of each node are deterministic by the layout. Reference: Computing the Coordinates of a node The sender randomly selects one of the nodes belonging to the grid and transmits a message to the node, The recipient receiving this message relays the message to all nodes in the grid. If the sender is included in the grid while selecting one of the nodes belonging to the grid, always select the sender. If the message transfer to the selected node fails, select the next node and send it again. Depending on the layout, the relay is done in the order of z-axis, y-axis, x-axis. Reference: How message broadcasting works","title":"Basic Principle of Cosmic.P2P Operation"},{"location":"p2p/#layout-decision-based-on-npeers","text":"The layout is determined by the sender when sending message, and is determined by the number( nPeers ) of nodes participating in the entire network and the number( N ) of nodes to be included in a grid. N: Number of nodes to include in one grid nPeers: The total number of nodes participating in the network The figure below shows how to determine the layout according to the number of total nodes participating in the network( nPeers ) and the number of nodes to be included in a grid( N ) Each box in the above figure has about N nodes","title":"Layout Decision based on nPeers"},{"location":"p2p/#computing-the-coordinates-of-a-node","text":"The Coordinates of the node are determined by extracting the hx , hy , and hz values from the hash value of the node address, and performing the remaining operations on each coordinate axis size of the layout CoordinatesOf(Node).X = 1 + ( hx mod layout.X ) CoordinatesOf(Node).Y = 1 + ( hy mod layout.Y ) CoordinatesOf(Node).Z = 1 + ( hz mod layout.Z ) These coordinates are deterministic according to the address of the nodes and layout, and they are uniformly distributed in each grid","title":"Computing the Coordinates of a node"},{"location":"p2p/#how-message-broadcasting-works","text":"For example, if you have 81 participating nodes and the layout is [3, 3, 3] , you can describe message broadcasting as follows: One box in the figure below contains about 3 nodes.","title":"How message broadcasting works"},{"location":"p2p/#coverage","text":"A node can broadcast to N ^ 4 nodes with N * 4 send call. A node can broadcast to 4,096 nodes with 32 send call ( if N = 8 ) A node can broadcast to 65,536 nodes with 64 send call ( if N = 16 ) A node can broadcast to 1,048,576 nodes with 128 send call ( if N = 32 ) And also can be extended to 4D-Coordiantes system( x, y, z, w ) A node can broadcast to N ^ 5 nodes with N * 5 send call on 4D-Coordinates system.","title":"Coverage"}]}